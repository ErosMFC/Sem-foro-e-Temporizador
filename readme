SEMAFORO:

1. **Definição dos Pinos dos LEDs**: 
   - São definidos os pinos de controle para cada LED: 
     - `LED_VERMELHO` está no pino GPIO 11.
     - `LED_AMARELO` está no pino GPIO 12.
     - `LED_VERDE` está no pino GPIO 13.

2. **Estado do Semáforo**:
   - A variável `estado_semaforo` armazena o estado atual do semáforo:
     - `0` para o LED vermelho aceso.
     - `1` para os LEDs vermelho e verde acesos (representando o amarelo).
     - `2` para o LED verde aceso.

3. **Função de Callback do Temporizador**:
   - A função `repeating_timer_callback` é chamada repetidamente pelo temporizador a cada 3000 milissegundos (3 segundos).
   - Esta função apaga todos os LEDs (configurando-os para 0).
   - Dependendo do valor de `estado_semaforo`, a função acende o LED correspondente:
     - No estado `0`, o LED vermelho é aceso.
     - No estado `1`, os LEDs vermelho e verde são acesos simultaneamente, simulando o amarelo.
     - No estado `2`, o LED verde é aceso.
   - Após acender o LED correspondente, o estado do semáforo é alterado para o próximo (circular entre os estados 0, 1 e 2) usando a expressão `(estado_semaforo + 1) % 3`.
   - A função retorna `true` para garantir que o temporizador continue chamando a função repetidamente.

4. **Função `main`**:
   - Inicializa a comunicação padrão para usar a função `printf` para exibir o estado do semáforo no terminal.
   - Configura os pinos GPIO 11, 12 e 13 como saída.
   - Configura o temporizador para chamar a função `repeating_timer_callback` a cada 3000 milissegundos (3 segundos).
   - Um laço `while (true)` é utilizado para imprimir o estado atual do semáforo a cada 1 segundo. Isso serve para monitorar e exibir no console qual LED está aceso a cada momento.

Em resumo, o código simula o funcionamento de um semáforo com LEDs, alternando entre os estados de "vermelho", "amarelo" e "verde", e imprime o estado atual no terminal a cada segundo. A troca de estados é controlada automaticamente pelo temporizador.

Temporizador:

