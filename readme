SEMAFORO:

1. **Definição dos Pinos dos LEDs**: 
   - São definidos os pinos de controle para cada LED: 
     - `LED_VERMELHO` está no pino GPIO 11.
     - `LED_AMARELO` está no pino GPIO 12.
     - `LED_VERDE` está no pino GPIO 13.

2. **Estado do Semáforo**:
   - A variável `estado_semaforo` armazena o estado atual do semáforo:
     - `0` para o LED vermelho aceso.
     - `1` para os LEDs vermelho e verde acesos (representando o amarelo).
     - `2` para o LED verde aceso.

3. **Função de Callback do Temporizador**:
   - A função `repeating_timer_callback` é chamada repetidamente pelo temporizador a cada 3000 milissegundos (3 segundos).
   - Esta função apaga todos os LEDs (configurando-os para 0).
   - Dependendo do valor de `estado_semaforo`, a função acende o LED correspondente:
     - No estado `0`, o LED vermelho é aceso.
     - No estado `1`, os LEDs vermelho e verde são acesos simultaneamente, simulando o amarelo.
     - No estado `2`, o LED verde é aceso.
   - Após acender o LED correspondente, o estado do semáforo é alterado para o próximo (circular entre os estados 0, 1 e 2) usando a expressão `(estado_semaforo + 1) % 3`.
   - A função retorna `true` para garantir que o temporizador continue chamando a função repetidamente.

4. **Função `main`**:
   - Inicializa a comunicação padrão para usar a função `printf` para exibir o estado do semáforo no terminal.
   - Configura os pinos GPIO 11, 12 e 13 como saída.
   - Configura o temporizador para chamar a função `repeating_timer_callback` a cada 3000 milissegundos (3 segundos).
   - Um laço `while (true)` é utilizado para imprimir o estado atual do semáforo a cada 1 segundo. Isso serve para monitorar e exibir no console qual LED está aceso a cada momento.

Em resumo, o código simula o funcionamento de um semáforo com LEDs, alternando entre os estados de "vermelho", "amarelo" e "verde", e imprime o estado atual no terminal a cada segundo. A troca de estados é controlada automaticamente pelo temporizador.

Temporizador:

O código apresentado implementa um controle de LEDs e um botão para iniciar e reiniciar uma sequência de LEDs com debounce e controle de temporização no Raspberry Pi Pico. A seguir, explico o funcionamento detalhado do código:

### 1. **Definição dos Pinos dos LEDs e do Botão**:
   - Os LEDs são controlados pelos pinos GPIO 11 (azul), 12 (vermelho) e 13 (verde).
   - O botão é conectado ao pino GPIO 5, e um resistor de pull-up é ativado para garantir que o botão esteja em um nível lógico alto quando não pressionado.

### 2. **Variáveis Globais**:
   - `estado_led`: Armazena o estado atual da sequência de LEDs. Os estados são numerados de 0 a 3, correspondendo à sequência de LEDs.
   - `sequencia_ativa`: Indica se a sequência de LEDs está ativa.
   - `pending_restart`: Flag que indica se há um pedido de reinício pendente da sequência.
   - `ultimo_press_timestamp`: Marca o momento do último pressionamento do botão para gerenciar o tempo de debounce.
   - `DEBOUNCE_DELAY`: Define o tempo de debounce para o botão, evitando múltiplas leituras do mesmo pressionamento.

### 3. **Função `setup_gpio`**:
   - Configura os pinos dos LEDs como saída (`GPIO_OUT`).
   - Configura o pino do botão como entrada (`GPIO_IN`) e ativa o resistor de pull-up.

### 4. **Função `timer_callback`**:
   - Esta função é chamada pelo temporizador a cada 3 segundos para alternar os LEDs:
     - No estado `1`, acende o LED vermelho e apaga o azul.
     - No estado `2`, acende o LED verde e apaga o vermelho.
     - No estado `3`, a sequência termina e o LED verde é apagado.
   - Se o parâmetro `user_data` for igual a "restart", a sequência de LEDs é reiniciada.
   - A função também verifica se há um pedido de reinício pendente e, se houver, inicia uma nova sequência após um breve intervalo.

### 5. **Função `button_pressed`**:
   - Realiza a verificação do estado do botão com debounce. Só considera um novo pressionamento se o tempo desde o último pressionamento for maior que o tempo de debounce definido (`DEBOUNCE_DELAY`).

### 6. **Função `restart_led_sequence`**:
   - Inicia a sequência de LEDs. O LED azul é aceso e os outros LEDs são apagados. Em seguida, inicia a transição de LEDs após 3 segundos.

### 7. **Função `button_callback`**:
   - Verifica o estado do botão e decide a ação a ser tomada:
     - Se nenhuma sequência estiver ativa, inicia a sequência de LEDs imediatamente.
     - Se uma sequência já estiver ativa, marca um pedido de reinício para ser executado quando a sequência atual terminar.

### 8. **Função `main`**:
   - Inicializa os GPIOs e o timestamp do botão.
   - Entra em um loop contínuo, verificando e processando o estado do botão e mantendo o microcontrolador ativo para processar os eventos.

### Como Funciona:
1. O código começa com todos os LEDs apagados.
2. Quando o botão é pressionado, se nenhuma sequência de LEDs estiver ativa, o LED azul acende e a sequência começa. A cada 3 segundos, o código alterna os LEDs para o vermelho e depois para o verde.
3. Se o botão for pressionado durante a execução da sequência, o pedido de reinício é armazenado e, após a conclusão da sequência, ela reiniciará a partir do LED azul.
4. O debounce garante que o botão não seja contado várias vezes em um curto período de tempo.

Este programa gerencia uma sequência de LEDs, permitindo sua reinicialização ao pressionar o botão, e utilizando um temporizador para controlar as transições entre os LEDs.

